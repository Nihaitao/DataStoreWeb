
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title></title>
</head>
<body>
    <div class="layui-upload">
        <button type="button" class="layui-btn layui-btn-normal" id="testList">选择多文件</button>
        <div class="layui-upload-list">
            <table class="layui-table">
                <thead>
                    <tr>
                        <th>文件名</th>
                        <th>大小</th>
                        <th>状态</th>
                        <th>操作</th>
                    </tr>
                </thead>
                <tbody id="demoList"></tbody>
            </table>
        </div>
        <button type="button" class="layui-btn" id="testListAction">开始上传</button>
    </div>
</body>
</html>

<link href="../../../Resources/js/modules/layer/css/layui.css" rel="stylesheet" />
<script src="../../../Resources/js/modules/vue/vue.min.js"></script>
<script src="../../../Resources/js/modules/layer/layui.js"></script>
<script src="../../../Resources/js/require_config.js"></script>
<script>
    require_js_file(['table', 'form', 'jquery', 'tableExt', 'upload'],
    function (fnr) {
        var table = layui.table;
        var form = layui.form;
        var tableExt = layui.tableExt;
        var $ = layui.$;
        var upload = layui.upload;

        var files;
        var JSONRPC = '{"title":"", "tag": "","desc":""}';
        //var _file;
        //多文件列表示例
        var demoListView = $('#demoList')
        , uploadListIns = upload.render({
            elem: '#testList'
          , url: 'http://v.polyv.net/uc/services/rest?method=uploadfile'
          , accept: 'file'
          , exts: 'mp4'
          , multiple: true
          , auto: false
          , field: 'Filedata'
          , bindAction: '#testListAction'
          , data: {
              'fcharset': 'ISO-8859-1',
              'writetoken': 'cb1ffbac-ae05-4b4e-b310-3f92c344a2a2',
              'cataid': '1489407029547',
              'JSONRPC': JSONRPC,
              'sign': hex_sha1("cataid=1489407029547&JSONRPC=" + JSONRPC + "&writetoken=cb1ffbac-ae05-4b4e-b310-3f92c344a2a2UfmKG8jJ82")
          }
          , choose: function (obj) {
              files = obj.pushFile(); //将每次选择的文件追加到文件队列
              var that = this.data;
              //读取本地文件
              obj.preview(function (index, file, result) {
                  var tr = $(['<tr id="upload-' + index + '">'
                    , '<td>' + file.name + '</td>'
                    , '<td>' + (file.size / 1014).toFixed(1) + 'kb</td>'
                    , '<td>等待上传</td>'
                    , '<td>'
                      , '<button class="layui-btn layui-btn-mini demo-reload layui-hide">重传</button>'
                      , '<button class="layui-btn layui-btn-mini layui-btn-danger demo-delete">删除</button>'
                    , '</td>'
                  , '</tr>'].join(''));

                  //单个重传
                  tr.find('.demo-reload').on('click', function () {
                      obj.upload(index, file);
                  });

                  //删除
                  tr.find('.demo-delete').on('click', function () {
                      delete files[index]; //删除对应的文件
                      tr.remove();
                  });

                  demoListView.append(tr);
              });
          }, before: function (obj) { //obj参数包含的信息，跟 choose回调完全一致，可参见上文。
              //layer.load(); //上传loading
              console.log(obj)
          }
          , done: function (res, index, upload) {
              console.log(res)
              if (res.error == 0) { //上传成功
                  var tr = demoListView.find('tr#upload-' + index), tds = tr.children();
                  tds.eq(2).html('<span style="color: #5FB878;">上传成功</span>');
                  tds.eq(3).html(''); //清空操作
                  delete files[index]; //删除文件队列已经上传成功的文件
                  return;
              }
              this.error(index, upload);
          }
          , error: function (index, upload) {
              var tr = demoListView.find('tr#upload-' + index)
              , tds = tr.children();
              tds.eq(2).html('<span style="color: #FF5722;">上传失败</span>');
              tds.eq(3).find('.demo-reload').removeClass('layui-hide'); //显示重传
          }
        });
    });
</script>

<script type="text/javascript">
    /*
     *
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
     * in FIPS PUB 180-1
     *
     * By lizq
     *
     * 2006-11-11
     *
     */
    /*
     *
     * Configurable variables.
     *
     */
    var hexcase = 0; /* hex output format. 0 - lowercase; 1 - uppercase */
    var chrsz = 8; /* bits per input character. 8 - ASCII; 16 - Unicode */
    /*
     *
     * The main function to calculate message digest
     *
     */
    function hex_sha1(s) {

        return binb2hex(core_sha1(AlignSHA1(s)));

    }

    /*
     *
     * Perform a simple self-test to see if the VM is working
     *
     */
    function sha1_vm_test() {

        return hex_sha1("abc") == "a9993e364706816aba3e25717850c26c9cd0d89d";

    }

    /*
     *
     * Calculate the SHA-1 of an array of big-endian words, and a bit length
     *
     */
    function core_sha1(blockArray) {

        var x = blockArray; // append padding
        var w = Array(80);

        var a = 1732584193;

        var b = -271733879;

        var c = -1732584194;

        var d = 271733878;

        var e = -1009589776;

        for (var i = 0; i < x.length; i += 16) // 每次处理512位 16*32
        {

            var olda = a;

            var oldb = b;

            var oldc = c;

            var oldd = d;

            var olde = e;

            for (var j = 0; j < 80; j++) // 对每个512位进行80步操作
            {

                if (j < 16)
                    w[j] = x[i + j];

                else
                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);

                var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));

                e = d;

                d = c;

                c = rol(b, 30);

                b = a;

                a = t;

            }

            a = safe_add(a, olda);

            b = safe_add(b, oldb);

            c = safe_add(c, oldc);

            d = safe_add(d, oldd);

            e = safe_add(e, olde);

        }

        return new Array(a, b, c, d, e);

    }

    /*
     *
     * Perform the appropriate triplet combination function for the current
     * iteration
     *
     * 返回对应F函数的值
     *
     */
    function sha1_ft(t, b, c, d) {

        if (t < 20)
            return (b & c) | ((~b) & d);

        if (t < 40)
            return b ^ c ^ d;

        if (t < 60)
            return (b & c) | (b & d) | (c & d);

        return b ^ c ^ d; // t<80
    }

    /*
     *
     * Determine the appropriate additive constant for the current iteration
     *
     * 返回对应的Kt值
     *
     */
    function sha1_kt(t) {

        return (t < 20) ? 1518500249 : (t < 40) ? 1859775393 : (t < 60) ? -1894007588 : -899497514;

    }

    /*
     *
     * Add integers, wrapping at 2^32. This uses 16-bit operations internally
     *
     * to work around bugs in some JS interpreters.
     *
     * 将32位数拆成高16位和低16位分别进行相加，从而实现 MOD 2^32 的加法
     *
     */
    function safe_add(x, y) {

        var lsw = (x & 0xFFFF) + (y & 0xFFFF);

        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);

        return (msw << 16) | (lsw & 0xFFFF);

    }

    /*
     *
     * Bitwise rotate a 32-bit number to the left.
     *
     * 32位二进制数循环左移
     *
     */
    function rol(num, cnt) {

        return (num << cnt) | (num >>> (32 - cnt));

    }

    /*
     *
     * The standard SHA1 needs the input string to fit into a block
     *
     * This function align the input string to meet the requirement
     *
     */
    function AlignSHA1(str) {

        var nblk = ((str.length + 8) >> 6) + 1,
            blks = new Array(nblk * 16);

        for (var i = 0; i < nblk * 16; i++)
            blks[i] = 0;

        for (i = 0; i < str.length; i++)

            blks[i >> 2] |= str.charCodeAt(i) << (24 - (i & 3) * 8);

        blks[i >> 2] |= 0x80 << (24 - (i & 3) * 8);

        blks[nblk * 16 - 1] = str.length * 8;

        return blks;

    }

    /*
     *
     * Convert an array of big-endian words to a hex string.
     *
     */
    function binb2hex(binarray) {

        var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";

        var str = "";

        for (var i = 0; i < binarray.length * 4; i++) {

            str += hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8 + 4)) & 0xF) +

                hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8)) & 0xF);

        }

        return str;

    }

    /*
     *
     * calculate MessageDigest accord to source message that inputted
     *
     */
    // function calcDigest() {

    //     var digestM = hex_sha1(document.SHAForm.SourceMessage.value);

    //     document.SHAForm.MessageDigest.value = digestM;

    // }</script>