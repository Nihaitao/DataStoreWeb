<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title></title>
    <style>
        .tree {
            border-radius: 2px;
        }

        .tree-content {
            padding-left: 30px;
        }

        .tree-node {
            border-top: 1px solid #e2e2e2;
            position: relative;
        }

            .tree-node:first-child {
                border-top: none;
            }

            .tree-node .option-area {
                position: absolute;
                top: 50%;
                right: 15px;
                transform: translateY(-50%);
            }

        .option-area .layui-icon {
            display: inline-block;
            color: #999;
        }

            .option-area .layui-icon:hover {
                color: #333;
            }

        .tree-tit {
            position: relative;
            height: 42px;
            line-height: 42px;
            padding: 0 15px;
            color: #333;
            background-color: #f0f0f0;
            cursor: pointer;
            margin-bottom: 10px;
        }

            .tree-tit .layui-icon {
                display: inline-block;
                margin-right: 10px;
                transition: transform 0.4s;
            }

                .tree-tit .layui-icon.open {
                    -webkit-transform: rotate(90deg);
                    -moz-transform: rotate(90deg);
                    transform: rotate(90deg);
                }

            .tree-tit:hover {
                box-shadow: 2px 2px 5px #ccc;
            }

        .layui-colla-content {
            display: none;
            padding: 10px 15px;
            line-height: 22px;
            border-top: 1px solid #f0f0f0;
            color: #666;
        }

        .state-highlight {
            height: 50px;
            border: 1px dashed #5FB878;
            margin-bottom: 10px;
        }

        [v-cloak] {
            display: none;
        }
    </style>

</head>
<body id="root">
    <div class="mainContainer">
        <blockquote class="layui-elem-quote">
            <div class="layui-row layui-form">
                <div class="layui-col-xs6" style="text-align:left">
                    <button class="layui-btn" @click="SaveChapter"><i class="layui-icon"></i> 添加章</button>
                </div>
            </div>
        </blockquote>
        <div class="block layui-clear" style="height:600px;overflow:hidden;">
            <div class="layui-col-xs6" style="overflow:auto;height:100%;">
                <div class="tree-wrap" v-cloak>
                    <div class="tree" v-for="(index,item) in ChapterList" v-bind:data-id="item.ID">
                        <div class="tree-node">
                            <div class="tree-tit" @click="setInfo(item)">
                                <h2 class="tit-area">
                                    <i class="layui-icon open arrow" v-if="item.Children.length>0">&#xe602;</i><i class="layui-icon" style="visibility:hidden;" v-else>&#xe602;</i><span class="name">{{item.Name}}</span>
                                </h2>
                                <div class="option-area">
                                    <button class="layui-btn layui-btn-small" v-bind:class='[item.Valid == 1 ? " layui-btn-warm" :"layui-btn-normal"]' @click.stop="SetChapterValid(item)">{{item.Valid ==0 ?'启用':'禁用'}}</button>
                                    <i class="layui-icon add" @click.stop="add(item,index)">&#xe654;</i>
                                    <i class="layui-icon del" @click.stop="delete1(item,index)">&#xe640;</i>
                                </div>
                            </div>
                            <div class="tree-content">
                                <div class="tree" v-if="item.Children.length>0" v-for="(index2,item2) in item.Children" v-bind:data-id="item2.ID">
                                    <div class="tree-node">
                                        <div class="tree-tit" @click="setInfo(item2)">
                                            <h2 class="tit-area">
                                                <i class="layui-icon open arrow" v-if="item2.Children.length>0">&#xe602;</i><i class="layui-icon" style="visibility:hidden;" v-else>&#xe602;</i><span class="name">{{item2.Name}}</span>
                                            </h2>
                                            <div class="option-area">
                                                <button class="layui-btn layui-btn-small" @click.stop="SelectQuestion(item2)">题目</button>
                                                <button class="layui-btn layui-btn-small" v-bind:class='[item2.Valid == 1 ? " layui-btn-warm" :"layui-btn-normal"]' @click.stop="SetChapterValid(item2)">{{item2.Valid ==0 ?'启用':'禁用'}}</button>
                                                <i class="layui-icon del" @click.stop="delete1(item2,index2)">&#xe640;</i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="layui-col-xs6" style="overflow:auto;height:100%;">
                <div class="layui-form" v-show="modifyChapter">
                    <div class="layui-form-item">
                        <label class="layui-form-label">章节名称</label>
                        <div class="layui-input-block">
                            <input type="text" lay-verify="required" autocomplete="off" placeholder="请输入章节名称" class="layui-input" v-model="queryFormData.Name">
                        </div>
                    </div>
                    <div class="layui-form-item">
                        <label class="layui-form-label">排序</label>
                        <div class="layui-input-block">
                            <input type="text" autocomplete="off" placeholder="请输入章节排序" class="layui-input" v-model="queryFormData.Sort">
                        </div>
                    </div>
                    <div class="layui-form-item layui-form-text">
                        <label class="layui-form-label">状态</label>
                        <div class="layui-input-block">
                            <remote-rad layverify="required" v-bind:setting="validSetting" v-bind:value.sync="queryFormData.Valid"
                                        initial="off"></remote-rad>
                        </div>
                    </div>
                    <div class="layui-form-item ">
                        <div class="layui-input-block">
                            <button class="layui-btn" @click="saveDisciplineInfo">保存</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
<link href="https://bbsresources.oss-cn-hangzhou.aliyuncs.com/js/modules/layer/css/layui.css" rel="stylesheet" />
<script src="https://bbsresources.oss-cn-hangzhou.aliyuncs.com/js/modules/vue/vue.min.js"></script>
<script src="https://bbsresources.oss-cn-hangzhou.aliyuncs.com/js/modules/layer/layui.js"></script>
<script src="https://bbsresources.oss-cn-hangzhou.aliyuncs.com/js/require_config.js"></script>
<script src="https://cdn.bootcss.com/jquery/1.10.1/jquery.min.js"></script>
<script src="https://bbsresources.oss-cn-hangzhou.aliyuncs.com/js/jquery/jquery-ui.js"></script>
<script src="../../ResourcesCenter/classroom/Sortable.js?v1.0.1"></script>
<script>
    require_js_file(['table', 'form', 'jquery', 'tableExt', 'laydate', 'upload'],
        function (fnr) {
            var table = layui.table;
            var form = layui.form;
            var tableExt = layui.tableExt;
            var $ = layui.$;
            var upload = layui.upload;

            //搜索条件
            var rootApp = new Vue({
                el: '#root',
                data: {
                    modifyChapter: false,
                    ChapterLength:'',
                    ChapterList: [],
                    emptyChapter: {
                        CID: 0,
                        Children: [],
                        ID: 0,
                        Name: '',
                        Valid: 1,
                        Sort:99,
                    },
                    validSetting: {
                        search: true,
                        options: [
                            {
                                key: '1',
                                value: '启用'
                            }, {
                                key: '0',
                                value: '禁用'
                            }
                        ]
                    },
                    queryFormData: {
                        QuestionStore_ID:"",
                        CID: '',
                        Name: '',
                        Valid: '',
                        Sort:99,
                    },
                },
                computed:{

                },
                ready: function () {
                    this.queryFormData.QuestionStore_ID = fnr.getQueryString('ID');
                    this.GetChapterList();
                },
                methods: {
                    //获取长度
                    length: function (arr) {
                        return (arr.length)+1;
                    },
                    //添加试题
                    SelectQuestion: function (item) {
                        fnr.openDialog({
                            title: '添加试题',
                            area: ['1000px', '650px'],
                            content: ['/Html/ResourcesCenter/Chapters/QuestionList.html?ID=' +item.ID + "&QuestionStore_ID=" + fnr.getQueryString('ID')],
                            btn: ['关闭'],
                            yes: function (index, layero) {
                                layer.close(index);
                                tableIns.refresh();
                            },
                            events: {
                                refresh: function (data) {
                                    if (data.status) {
                                        layer.msg('添加成功');
                                        tableIns.refresh();
                                    } else {
                                        layer.msg('添加失败');
                                    }
                                }
                            }
                        });
                    },
                    //启用禁用章节
                    SetChapterValid:function(item){
                        var self=this;
                        if(item.Valid == 1 ){
                            layer.confirm('是否禁用?如果禁用章,下面的节都会禁用',function(index){
                                $.post("/service/datastore/Chapter/Enabledisable",{ID:item.ID,Valid:0},function(res){
                                    if(res.SuccessResponse){
                                        self.GetChapterList();
                                        layer.close(index);
                                    }
                                    layer.msg(res.Message);
                                })
                            })
                        }else if(item.Valid == 0 ){
                            layer.confirm('是否启用',function(index){
                                $.post("/service/datastore/Chapter/Enabledisable",{ID:item.ID,Valid:1},function(res){
                                    if(res.SuccessResponse){
                                        self.GetChapterList();
                                        layer.close(index);
                                    }
                                    layer.msg(res.Message);
                                })
                            })
                       }
                },
            //设置章节
             setInfo: function (item) {
                 this.modifyChapter = true;
              this.queryFormData = item;
                    },
                    //保存章节信息
                    saveDisciplineInfo: function () {
                        this.queryFormData.QuestionStore_ID = fnr.getQueryString('ID');
                        this.saveRequst(this.queryFormData);
                    },
                    saveRequst: function (params,cb) {
                        var self=this;
                        if(params.ID==0){
                            $.post("/service/datastore/Chapter/AddChapter", params, function (res) {
                                if (res.SuccessResponse) {
                                    if(cb && typeof cb=="function")
                                        cb(res);
                                    layer.msg("添加成功");
                                    self.GetChapterList();                                    
                                    self.modifyChapter = false;
                                }else{
                                    layer.msg(res.Message);
                                    return;
                                }
                            })
                        }
                        else{
                            $.post("/service/datastore/Chapter/UpdateChapter", params, function (res) {
                                if (res.SuccessResponse) {
                                    if(cb && typeof cb=="function")
                                        cb(res);
                                    layer.msg("修改成功");  
                                    self.GetChapterList();
                                }else{
                                    layer.msg(res.Message);
                                    return;
                                }
                            })
                        }
                    },
                    //添加章
                    SaveChapter: function () {
                        var self=this;
                        var item=this.emptyChapter;
                        item.Name = "" ;
                        item.CID = 0;
                        this.queryFormData = item;
                        this.modifyChapter = true;
                    },
                    //查询章节集合
                    GetChapterList: function () {
                        var self = this;
                        $.get("/service/datastore/Chapter/GetChapterList", {QuestionStore_ID:fnr.getQueryString('ID')}, function (res) {
                            if(res.SuccessResponse){
                                self.ChapterList = res.Data;
                                self.$nextTick(function () {
                                    $(".tree-wrap").mySortable({
                                        "tree": ".tree-wrap",
                                        "treeContent": ".tree-content",
                                        "treeTitle": ".tree-tit",
                                        "optionArea": ".option-area"
                                    });
                                });
                            }
                        })
                    },
                    add: function (item, index,parentIndex) {
                        var self=this;
                        var obj = this.emptyChapter;
                        this.modifyChapter=true;
                        obj.CID=self.ChapterList[index].ID
                        obj.Name = "";
                        obj.Sort=99;
                        this.queryFormData = obj;
                        this.modifyChapter = true;
                    },

                    delete1: function (item, index) {
                        var self = this;
                        layer.confirm('是否删除？', {
                            btn: ['确定', '取消'] //按钮
                        }, function () {
                            $.post("/service/datastore/Chapter/DeleteChapter", { ID: item.ID }, function (res) {
                                if (res.SuccessResponse) {
                                    self.ChapterList.splice(index, 1);
                                    layer.msg('删除成功', { icon: 1 });
                                    layer.close(index);
                                    self.modifyChapter = false;
                                    self.GetChapterList();
                                }
                                else
                                {
                                    layer.close(index);
                                    layer.msg(res.Message);
                                }
                             })
                        })
                    }
                }
            });
        });
</script>